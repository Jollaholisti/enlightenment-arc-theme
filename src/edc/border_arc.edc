//signal: "e,state,shadow,on"; source: "e";
//signal: "e,state,shadow,off"; source: "e";
//signal: "e,state,focused"; source: "e";
//signal: "e,state,unfocused"; source: "e";
//signal: "e,state,urgent"; source: "e";
//signal: "e,state,not_urgent"; source: "e";
//signal: "e,state,hung"; source: "e";
//signal: "e,state,unhung"; source: "e";
//signal: "e,state,shaded"; source: "e";
//signal: "e,state,unshaded"; source: "e";
//signal: "e,state,shading"; source: "e";
//signal: "e,state,unshading"; source: "e";
//signal: "e,action,maximize*"; source: "e";
//signal: "e,action,unmaximize*"; source: "e";
//signal: "e,state,focused"; source: "e";
//signal: "e,state,unfocused"; source: "e";
//part { name: "e.swallow.client"; type: SWALLOW;
//part { name: "e.text.title"; type: TEXT; mouse_events: 0;
//part { name: "e.swallow.icon"; type: SWALLOW; mouse_events: 0;
//part { name: "e.event.titlebar"; type: RECT;
//part { name: "e.event.icon"; type: RECT;
//part { name: "e.event.close"; type: RECT;
//part { name: "e.event.maximize"; type: RECT;
//part { name: "e.event.minimize"; type: RECT;
//part { name: "e.event.resize.tl"; type: RECT;
//part { name: "e.event.resize.t"; type: RECT;
//part { name: "e.event.resize.tr"; type: RECT;
//part { name: "e.event.resize.bl"; type: RECT;
//part { name: "e.event.resize.b"; type: RECT;
//part { name: "e.event.resize.br"; type: RECT;
//group { name: "e/widgets/border/default/border";
//group { name: "e/widgets/border/sparkle/border";
//group { name: "e/widgets/border/dialog/border";
//group { name: "e/widgets/border/noresize/border";
//group { name: "e/widgets/border/noresize_dialog/border";
//group { name: "e/widgets/border/pixel/border";
//group { name: "e/widgets/border/default/move";
//group { name: "e/widgets/border/default/resize";
#define INACTIVE 1
#define ACTIVE 2
#define HOVER 4
#define PRESSED 8
   group {
      name: "e/border/btn-close";
      // max: 28 28;
      // min: 2 2;
      script {
         public btmode;
         public eval_mode(m) {
            new i = m & INACTIVE;
            new h = m & HOVER;
            new p = m & PRESSED;

            if (!p) {
               if (!h) {
                  if (!i) {
                     set_state(PART:"base", "active", 0.0);
                  } else {
                     set_state(PART:"base", "default", 0.0);
                  }
               } else {
                  set_state(PART:"base", "hover", 0.0);
               }
            } else {
               set_state(PART:"base", "pressed", 0.0);
            }
         }
      }

      images.set {
         name: "close-btn";
         image {
            image: "close-btn.png" COMP;
            size: 1 1 14 14;
         }
         image {
            image: "close-btn@2.png" COMP;
            size: 15 15 28 28;
         }
         image {
            image: "close-btn@4.png" COMP;
            size: 29 29 128 128;
         }
      }
      parts {
         image { "base";
            desc { "default";
               image.normal: "close-btn";
               aspect: 1 1;
               aspect_preference: BOTH;
               color_class: "close-btn-inactive";
               // max: 28 28;
               // min: 2 2;
               step: 2 2;
            }
            desc { "active";
               inherit: "default";
               color_class: "close-btn-active";
            }
            desc { "hover";
               inherit: "default";
               color_class: "close-btn-hover";
            }
            desc { "pressed";
               inherit: "default";
               color_class: "close-btn-pressed";
            }
         }
      }
      programs {
         program {
            signal: "mouse,in"; source: "base";
            script {
               new m = get_int(btmode);
               m |= HOVER; set_int(btmode, m);
               eval_mode(m);
            }
         }
         program {
            signal: "mouse,out"; source: "base";
            script {
               new m = get_int(btmode);
               m &= ~HOVER; set_int(btmode, m);
               eval_mode(m);
            }
         }
         program {
            signal: "mouse,down,*"; source: "base";
            script {
               new m = get_int(btmode);
               m |= PRESSED; set_int(btmode, m);
               eval_mode(m);
            }
         }
         program {
            signal: "mouse,up,*"; source: "base";
            script {
               new m = get_int(btmode);
               m &= ~PRESSED; set_int(btmode, m);
               eval_mode(m);
            }
         }
         program {
            signal: "e,state,focused"; source: "e";
            script {
               new m = get_int(btmode);
               m &= ~INACTIVE; set_int(btmode, m);
               eval_mode(m);
            }
         }
         program {
            signal: "e,state,unfocused"; source: "e";
            script {
               new m = get_int(btmode);
               m |= INACTIVE; set_int(btmode, m);
               eval_mode(m);
            }
         }
      }
   }

   group { name: "e/border/btn-minimize";
      // max: 28 28;
      // min: 2 2;

      script {
         public btmode;
         public eval_mode(m) {
            new i = m & INACTIVE;
            new h = m & HOVER;
            new p = m & PRESSED;

            if (!p) {
               if (!h) {
                  if (!i) {
                     set_state(PART:"base", "active", 0.0);
                     set_state(PART:"border", "active", 0.0);
                     set_state(PART:"symbol", "active", 0.0);
                  } else {
                     set_state(PART:"base", "default", 0.0);
                     set_state(PART:"border", "default", 0.0);
                     set_state(PART:"symbol", "default", 0.0);
                  }
               } else {
                  set_state(PART:"base", "hover", 0.0);
                  set_state(PART:"border", "hover", 0.0);
                  set_state(PART:"symbol", "hover", 0.0);
               }
            } else {
               set_state(PART:"base", "pressed", 0.0);
               set_state(PART:"border", "pressed", 0.0);
               set_state(PART:"symbol", "pressed", 0.0);
            }
         }
      }

      images.set {
         name: "mini-maxi-bg";
         image {
            image: "mini-maxi-bg.png" COMP;
            size: 1 1 14 14;
         }
         image {
            image: "mini-maxi-bg@2.png" COMP;
            size: 15 15 28 28;
         }
         image {
            image: "mini-maxi-bg@4.png" COMP;
            size: 29 29 128 128;
         }
      }
      images.set {
         name: "minimize-dash";
         image {
            image: "minimize-dash.png" COMP;
            size: 1 1 14 14;
         }
         image {
            image: "minimize-dash@2.png" COMP;
            size: 15 15 28 28;
         }
         image {
            image: "minimize-dash@4.png" COMP;
            size: 29 29 128 128;
         }
      }
      images.set {
         name: "mini-maxi-border";
         image {
            image: "mini-maxi-border.png" COMP;
            size: 1 1 14 14;
         }
         image {
            image: "mini-maxi-border@2.png" COMP;
            size: 15 15 28 28;
         }
         image {
            image: "mini-maxi-border@4.png" COMP;
            size: 29 29 128 128;
         }
      }
      parts {
         image { "base";
            desc { "default";
               image.normal: "mini-maxi-bg";
               aspect: 1 1;
               aspect_preference: BOTH;
               color_class: "mini-maxi-bg-inactive";
               // max: 28 28;
               step: 2 2;
            }
            desc { "active";
               inherit: "default";
            }
            desc { "hover";
               inherit: "default";
               color_class: "mini-maxi-bg-hover";
            }
            desc { "pressed";
               inherit: "default";
               color_class: "mini-maxi-bg-pressed";
            }
         }
         image { "border"; nomouse;
            desc { "default";
               image.normal: "mini-maxi-border";
               aspect: 1 1;
               aspect_preference: BOTH;
               color_class: "mini-maxi-border-inactive";
               // max: 28 28;
               // min: 2 2;
               step: 2 2;
            }
            desc { "active";
               inherit: "default";
               color_class: "mini-maxi-border-active";
            }
            desc { "hover";
               inherit: "default";
               color_class: "mini-maxi-border-hover";
            }
            desc { "pressed";
               inherit: "default";
               color_class: "mini-maxi-border-pressed";
            }
         }
         image { "symbol"; nomouse;
            desc { "default";
               image.normal: "minimize-dash";
               aspect: 1 1;
               aspect_preference: BOTH;
               color_class: "mini-maxi-symbol-inactive";
               // max: 28 28;
               // min: 2 2;
               step: 2 2;
            }
            desc { "active";
               inherit: "default";
               color_class: "mini-maxi-symbol-active";
            }
            desc { "hover";
               inherit: "default";
               color_class: "mini-maxi-symbol-hover";
            }
            desc { "pressed";
               inherit: "default";
               color_class: "mini-maxi-symbol-pressed";
            }
         }
      }
      programs {
         program {
            signal: "mouse,in"; source: "base";
            script {
               new m = get_int(btmode);
               m |= HOVER; set_int(btmode, m);
               eval_mode(m);
            }
         }
         program {
            signal: "mouse,out"; source: "base";
            script {
               new m = get_int(btmode);
               m &= ~HOVER; set_int(btmode, m);
               eval_mode(m);
            }
         }
         program {
            signal: "mouse,down,*"; source: "base";
            script {
               new m = get_int(btmode);
               m |= PRESSED; set_int(btmode, m);
               eval_mode(m);
            }
         }
         program {
            signal: "mouse,up,*"; source: "base";
            script {
               new m = get_int(btmode);
               m &= ~PRESSED; set_int(btmode, m);
               eval_mode(m);
            }
         }
         program {
            signal: "e,state,focused"; source: "e";
            script {
               new m = get_int(btmode);
               m &= ~INACTIVE; set_int(btmode, m);
               eval_mode(m);
            }
         }
         program {
            signal: "e,state,unfocused"; source: "e";
            script {
               new m = get_int(btmode);
               m |= INACTIVE; set_int(btmode, m);
               eval_mode(m);
            }
         }
      }
   }
   group { name: "e/border/btn-maximize";
      inherit: "e/border/btn-minimize";
      images.set {
         name: "maximize-sym";
         image {
            image: "maximize-sym.png" COMP;
            size: 1 1 14 14;
         }
         image {
            image: "maximize-sym@2.png" COMP;
            size: 15 15 28 28;
         }
         image {
            image: "maximize-sym@4.png" COMP;
            size: 29 29 128 128;
         }
      }
      parts {
         image { "symbol"; nomouse;
            desc { "default";
               image.normal: "maximize-sym";
            }
            desc { "active";
               inherit: "default";
               color_class: "mini-maxi-symbol-active";
            }
            desc { "hover";
               inherit: "default";
               color_class: "mini-maxi-symbol-hover";
            }
            desc { "pressed";
               inherit: "default";
               color_class: "mini-maxi-symbol-pressed";
            }
         }
      }
   }
#undef HOVER
#undef ACTIVE
#undef INACTIVE
#undef PRESSED

#undef HOVER
#undef ACTIVE
#undef INACTIVE
#undef PRESSED


group {
   name: "e/widgets/border/default/border";
   alias: "e/widgets/border/shaped/border";
   images {
      image: "bg-top-rounded-3px.png" COMP;
      image: "border-top-rounded-3px.png" COMP;
      // enlightenment's window shadow
      image: "win_shadow_arc.png" COMP;
   }
   data.item: "shadow" "1";
   parts {
      part { name: "shadow_clip";
         type: RECT;
         mouse_events: 0;
         description { state: "default";
            rel1.to: "shadow";
            rel2.to: "shadow";
         }
         description { state: "hidden";
            visible: 0;
         }
      }
      part { name: "shadow";
         mouse_events: 0;
         clip_to: "shadow_clip";
         description { state: "default" 0.0;
            image.normal: "win_shadow_arc.png";
            image.border: 14 14 14 14;
            image.middle: 0;
            rel1.to: "top_bg";
            rel1.offset: -7 -3;
            rel2.to: "bottom";
            rel2.offset: 6 11;
            fill.smooth: 0;
         }
         description { state: "shaded";
            inherit: "default";
            rel2.to: "e.swallow.client";
         }
      }
      image { name: "top_bg"; nomouse;
         desc { "default";
            image.normal: "bg-top-rounded-3px.png";
            image.border: 3 3 3 3;
            rel2.to_y: "e.text.title";
            rel2.relative: 1.0 1.0;
            color_class: "win_border_title_bg_color";
         }
      }
      image { name: "top_border_shadow"; nomouse;
         desc { "default";
            image.normal: "border-top-rounded-3px.png";
            image.border: 3 3 3 3;
            rel1.offset: 0 1;
            rel2.to: "top_bg";
            color: WIN_BORDER_UNDERLINE;
         }
      }
      image { name: "top_border"; nomouse;
         desc { "default";
            image.normal: "border-top-rounded-3px.png";
            image.border: 3 3 3 3;
            rel2.to: "top_bg";
            color_class: "win_border_color";
         }
      }
      rect { name: "top_bg_maximized"; nomouse;
         desc { "default";
            rel2.to: "top_bg";
            color_class: "win_border_title_bg_color";
            visible: 0;
         }
         desc { "max";
            inherit: "default";
            visible: 1;
         }
      }
      part { name: "e.text.title";
         type: TEXT;
         mouse_events: 0;
         scale: 1;
         effect: SHADOW BOTTOM;
         description { state: "default" 0.0;
            rel1.relative: 0.0 0.0;
            rel1.offset: 7 3;
            rel2.relative: 0.0 0.0;
            rel2.offset: -2 3;
            rel2.to_x: "btn-spacer";
            align: 0.5 0.0;
            color_class: "win_border_title";
            text {
               font: FN; size: 11;
               text_class: "title_bar";
               align: 0.5 0.0;
               min: 0 1;
               text: "M";
            }
            fixed: 0 1;
         }
         description { state: "active" 0.0;
            inherit: "default" 0.0;
            color_class: "win_border_title_active";
         }
      }
      part { name: "btn-spacer";
         type: SPACER;
         description { state: "default" 0.0;
            rel1.to: "top_bg";
            rel1.relative: 0.0 0.25;
            rel2.to: "top_bg";
            rel2.relative: 1.0 0.85;
            aspect: 6 6;
            aspect_preference: VERTICAL;
            align: 1.0 0.5;
            fixed: 1 1;
         }
      }
      part { name: "e.event.titlebar";
         type: RECT;
         description { state: "default" 0.0;
            rel.to: "e.text.title";
            color: 0 0 0 0;
         }
      }
      group { name: "e.event.minimize";
         source: "e/border/btn-minimize";
         desc { "default";
               step: 2 2;
               rel1.relative: 0.05 0.0;
               rel.to: "btn-spacer";
               rel2.relative: 0.35 1.0;
               fixed: 1 1;
         }
      }
      group { name: "e.event.maximize";
         source: "e/border/btn-maximize";
         desc { "default";
               step: 2 2;
               rel.to: "btn-spacer";
               rel1.relative: 0.35 0.0;
               rel2.relative: 0.65 1.0;
               fixed: 1 1;
         }
      }
      group { name: "e.event.close";
         source: "e/border/btn-close";
         desc { "default";
               step: 2 2;
               rel.to: "btn-spacer";
               rel1.relative: 0.65 0.0;
         }
      }
      part { name: "bottom"; nomouse;
         type: RECT;
         description { state: "default" 0.0;
            color_class: "win_border_color";
            align: 0.0 1.0;
            max: 99999 1;
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "left"; nomouse;
         type: RECT;
         description { state: "default" 0.0;
            rel1 {
               to_y: "top_bg";
               relative: 0.0 1.0;
            }
            rel2 {
               to_y: "bottom";
               relative: 1.0 0.0;
            }
            color_class: "win_border_color";
            align: 0.0 0.0;
            max: 1 99999;
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "right"; nomouse;
         type: RECT;
         description { state: "default" 0.0;
            rel1 {
               to_y: "top_bg";
               relative: 0.0 1.0;
            }
            rel2 {
               to_y: "bottom";
               relative: 1.0 0.0;
            }
            color_class: "win_border_color";
            align: 1.0 0.0;
            max: 1 99999;
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "client_clip";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1.to_y: "e.swallow.client";
            rel2.to_y: "e.swallow.client";
         }
         description { state: "hidden" 0.0;
            inherit: "default";
            visible: 0;
         }
      }
      part { name: "e.swallow.client";
         type: SWALLOW;
         clip_to: "client_clip";
         description { state: "default" 0.0;
            rel1 {
               relative: 1.0 1.0;
               to_x: "left";
               to_y: "top_bg";
            }
            rel2 {
               relative: 0.0 0.0;
               to_x: "right";
               to_y: "bottom";
            }
         }
         description { state: "shaded" 0.0;
            inherit: "default" 0.0;
            rel2.relative: 1.0 1.0;
            rel2.offset: -1 -1;
         }
         description { state: "max" 0.0;
            inherit: "default" 0.0;
            rel2.relative: 1.0 1.0;
            rel2.offset: -1 -1;
         }
      }

      part { name: "e.event.resize.tl"; type: RECT;
         description { state: "default" 0.0;
            rel1.offset: -2 -2;
            rel2.offset: 2 2;
            rel2.relative: 0.0 0.0;
            min: 32 4;
            fixed: 1 1;
            align: 0.0 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "e.event.resize.t"; type: RECT;
         description { state: "default" 0.0;
            rel1.relative: 1.0 0.0;
            rel1.to_x: "e.event.resize.tl";
            rel2.relative: 0.0 0.0;
            rel2.to_x: "e.event.resize.tr";
            min: 0 4;
            align: 0.5 0.0;
            color: 0 0 0 0;
            fixed: 0 1;
         }
      }
      part { name: "e.event.resize.tr"; type: RECT;
         description { state: "default" 0.0;
            rel1.offset: -2 -2;
            rel2.offset: 2 2;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 0.0;
            min: 32 4;
            fixed: 1 1;
            align: 1.0 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "e.event.resize.bl"; type: RECT;
         description { state: "default" 0.0;
            rel1.relative: 0.0 1.0;
            rel1.to_y: "e.swallow.client";
            rel1.offset: -2 -3;
            rel2.offset: 2 2;
            // rel1.offset: 0 -1;
            rel2.relative: 0.0 1.0;
            min: 32 5;
            align: 0.0 1.0;
            color: 0 0 0 0;
            fixed: 1 1;
         }
         description { state: "shaded" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            visible: 0;
         }
         description { state: "max" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            visible: 0;
         }
      }
      part { name: "e.event.resize.b"; type: RECT;
         description { state: "default" 0.0;
            rel1.relative: 1.0 1.0;
            rel1.to_x: "e.event.resize.tl";
            rel1.to_y: "e.swallow.client";
            rel1.offset: 0 -1;
            rel2.relative: 0.0 1.0;
            rel2.to_x: "e.event.resize.tr";
            min: 0 5;
            align: 0.5 1.0;
            color: 0 0 0 0;
            fixed: 0 1;
         }
         description { state: "shaded" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            visible: 0;
         }
         description { state: "max" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            visible: 0;
         }
      }
      part { name: "e.event.resize.br"; type: RECT;
         description { state: "default" 0.0;
            rel1.relative: 1.0 1.0;
            rel1.to_y: "e.swallow.client";
            // rel1.offset: 0 -1;
            rel1.offset: -2 -3;
            rel2.offset: 2 2;
            rel2.relative: 1.0 1.0;
            min: 32 5;
            align: 1.0 1.0;
            color: 0 0 0 0;
            fixed: 1 1;
         }
         description { state: "shaded" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            visible: 0;
         }
         description { state: "max" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            visible: 0;
         }
      }
   }
   programs {
      program {
         signal: "e,state,shadow,on";
         source: "e";
         action: STATE_SET "default" 0.0;
         target: "shadow_clip";
      }
      program {
         signal: "e,state,shadow,off";
         source: "e";
         action: STATE_SET "hidden" 0.0;
         target: "shadow_clip";
      }
      program {
         signal: "e,state,shaded";
         source: "e";
         action: STATE_SET "shaded" 0.0;
         target: "shadow";
         target: "e.text.title";
      }
      program {
         signal: "e,state,unshaded";
         source: "e";
         action: STATE_SET "unshaded" 0.0;
         target: "shadow";
         target: "e.text.title";
      }
      program {
         signal: "e,state,focused";
         source: "e";
         action: STATE_SET "active" 0.0;
         target: "e.text.title";
      }
      program {
         signal: "e,state,unfocused";
         source: "e";
         action: STATE_SET "default" 0.0;
         target: "e.text.title";
      }

      program {
         signal: "e,action,maximize*"; source: "e";
         action: STATE_SET "max" 0.0;
         target: "e.swallow.client";
         target: "bottom";
         target: "top_bg_maximized";
         target: "e.event.resize.bl";
         target: "e.event.resize.b";
         target: "e.event.resize.br";
      }

      program {
         signal: "e,action,unmaximize*"; source: "e";
         action: STATE_SET "default" 0.0;
         target: "e.swallow.client";
         target: "bottom";
         target: "top_bg_maximized";
         target: "e.event.resize.bl";
         target: "e.event.resize.b";
         target: "e.event.resize.br";
      }
      program {
         signal: "mouse,clicked,*";
         source: "e.event.minimize";
         action: SIGNAL_EMIT "elm,action,iconify" "elm";
      }
   }
}

group { name: "e/widgets/border/dialog/border";
   alias: "e/widgets/border/modal/border";
   inherit: "e/widgets/border/default/border";
   parts {
      part { name: "e.event.titlebar";
         description { state: "default" 0.0;
            rel2.to_x: "e.event.close";
         }
      }
      part { name: "btn-spacer";
         desc { "default";
            aspect: 1 2;
         }
      }
      part { name: "e.event.close";
         desc { "default";
               step: 2 2;
               rel.to: "btn-spacer";
               rel1.relative: 0.0 0.0;
         }
      }
      part { name: "e.event.maximize";
         description { state: "default" 0.0;
            max: 0 0;
            aspect: 0.0 0.0;
            visible: 0;
            fixed: 1 1;
         }
      }
      part { name: "e.event.minimize";
         description { state: "default" 0.0;
            max: 0 0;
            aspect: 0.0 0.0;
            visible: 0;
            fixed: 1 1;
         }
      }
   }
}

group { name: "e/widgets/border/noresize/border";
   inherit: "e/widgets/border/default/border";
   parts {
      part { name: "e.event.resize.bl";
         description { state: "default" 0.0;
            min: 0 0;
            visible: 0;
         }
      }
      part { name: "e.event.resize.b";
         description { state: "default" 0.0;
            min: 0 0;
            visible: 0;
         }
      }
      part { name: "e.event.resize.br";
         description { state: "default" 0.0;
            min: 0 0;
            visible: 0;
         }
      }
   }
}

group { name: "e/widgets/border/noresize_dialog/border";
   inherit: "e/widgets/border/default/border";
   parts {
      part { name: "e.event.resize.bl";
         description { state: "default" 0.0;
            min: 0 0;
            visible: 0;
         }
      }
      part { name: "e.event.resize.b";
         description { state: "default" 0.0;
            min: 0 0;
            visible: 0;
         }
      }
      part { name: "e.event.resize.br";
         description { state: "default" 0.0;
            min: 0 0;
            visible: 0;
         }
      }
      part { name: "btn-spacer";
         desc { "default";
            aspect: 1 2;
         }
      }
      part { name: "e.event.close";
         desc { "default";
               step: 2 2;
               rel.to: "btn-spacer";
               rel1.relative: 0.0 0.0;
         }
      }
      part { name: "e.event.maximize";
         description { state: "default" 0.0;
            max: 0 0;
            aspect: 0.0 0.0;
            visible: 0;
            fixed: 1 1;
         }
      }
      part { name: "e.event.minimize";
         description { state: "default" 0.0;
            max: 0 0;
            aspect: 0.0 0.0;
            visible: 0;
            fixed: 1 1;
         }
      }
   }
}
group { name: "e/widgets/border/default/move";
   images.image: "bg-rounded-3px.png" COMP;
   images.image: "border-rounded-3px.png" COMP;
   images.image: "ic_win_move.png" COMP;
   parts {
      image { "bg";
         desc { "default";
            image.normal: "bg-rounded-3px.png";
            image.border: 3 3 3 3;
            image.middle: SOLID;
            fill.smooth: 0;
            color_class: "popup_bg";

         }
      }
      image { "border";
         desc { "default";
            image.normal: "border-rounded-3px.png";
            image.border: 3 3 3 3;
            image.middle: 0;
            rel.to: "bg";
            fill.smooth: 0;
            color_class: "popup_border";
         }
      }
      part { name: "icon";
         description { state: "default" 0.0;
            align: 0.0 0.5;
            FIXED_SIZE(21, 21)
            rel1.offset: 2 2;
            rel2.relative: 0.0 1.0;
            rel2.offset: 2 -3;
            image.normal: "ic_win_move.png";
         }
      }
      part { name: "e.text.label"; type: TEXT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to_x: "icon";
            rel1.offset: 4 4;
            rel1.relative: 1.0 0.0;
            rel2.offset: -5 -5;
            color_class: "popup_text";
            text { font: FN; size: FNSIZE;
               min: 1 1;
               ellipsis: -1;
               text_class: "move_text";
            }
         }
      }
   }
}

group { name: "e/widgets/border/default/resize";
   inherit: "e/widgets/border/default/move";
   images.image: "ic_win_resize.png" COMP;
   parts {
      part { name: "icon";
         description { state: "default" 0.0;
            image.normal: "ic_win_resize.png";
         }
      }
      part { name: "e.text.label"; type: TEXT;
         description { state: "default" 0.0;
            color_class: "popup_text";
         }
      }
   }
}